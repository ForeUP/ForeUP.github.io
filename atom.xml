<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://foreup.github.io/</id>
    <title>ForeUP&apos;s Blog</title>
    <updated>2022-01-29T11:32:42.410Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://foreup.github.io/"/>
    <link rel="self" href="https://foreup.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://foreup.github.io/images/avatar.png</logo>
    <icon>https://foreup.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, ForeUP&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[0129小结]]></title>
        <id>https://foreup.github.io/post/0129-xiao-jie/</id>
        <link href="https://foreup.github.io/post/0129-xiao-jie/">
        </link>
        <updated>2022-01-29T10:58:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="大纲">大纲</h2>
<ul>
<li><em>filter去重</em></li>
<li><em>filter筛选数组中素数</em></li>
<li><em>sort()函数复习</em></li>
<li><em>Array对象</em></li>
<li><em>函数闭包</em></li>
<li><em>箭头函数</em></li>
<li><em>generator对象</em></li>
<li><em>正则表达与Date对象</em></li>
<li><em>Jason</em></li>
</ul>
<h2 id="filter去重">filter去重</h2>
<pre><code class="language-javascript">var r,
arr = ['apple', 'strawberry', 'banana', 'pear', 'apple', 'orange', 'orange', 'strawberry'];
r = arr.filter(function (element, index, self) {
    return self.indexOf(element) === index;});
//PS:element, index, self只是形式？不知道能不能换！
</code></pre>
<h2 id="filter筛选素数">filter筛选素数</h2>
<p>简单的方法可以考虑素数只有<code>1和本身</code>两个因数，麻烦的可以依据定义写函数</p>
<pre><code class="language-javascript">//获得素数函数，可以利用素数只有两个因数，下面的是麻烦的，从定义写的函数！
function get_primes(arr) {
    var brr = arr.filter(function(ss){ 
    var jsw = 0;
    if (ss == 1) {jsw =1}
    else {
    for (var i=2; i&lt;ss; i++) {
    if( ss%i==0 ){
        jsw = jsw +1;
        break;}
    else{ continue; }
    }
} 
     return !jsw;
 });
return brr;
}
//依据因数是否只有2个
arr = arr.filter(function(element, index, self){
    var count = 0;//记录因数的数量
    for(var i=1;i&lt;=element;i++){
       if(element%i===0){
          count++;
        }
    }
    if(element===1){
      return false;
    }
   return count&lt;3;
});
console.log(arr)
</code></pre>
<h2 id="sort函数">sort函数</h2>
<p>在3w网站学过，快速排序，按照<code>-1,0,1</code>的顺序，也可以排列有属性的对象</p>
<pre><code class="language-javascript">//数字小-&gt;大排序；
points.sort(function(a, b){return a - b}); 
//随机排序数组；
points.sort(function(a, b){return 0.5 - Math.random()});
//排序有属性数组,按照字母排序对象
cars.sort(function(a, b){return a.year - b.year});；
function myFunction() {
	var cars = [{type:&quot;BMW&quot;, year:2017},{type:&quot;Audi&quot;, year:2019},{type:&quot;porsche&quot;, year:2018}];
  cars.sort(function(a, b){
    var x = a.type.toLowerCase();
    var y = b.type.toLowerCase();
    if (x &lt; y) {return -1;}
    if (x &gt; y) {return 1;}
    return 0;
  });
  displayCars();
}
</code></pre>
<h2 id="array">Array</h2>
<p>every</p>
<pre><code class="language-jacascript">var arr = ['Apple', 'pear', 'orange'];
console.log(arr.every(function (s) {
    return s.length &gt; 0;
})); // true, 因为每个元素都满足s.length&gt;0
</code></pre>
<p>find<br>
查找符合条件的<strong>第一个</strong>元素，如果找到了，<strong>返回这个元素</strong>；否则返回<code>undefined</code></p>
<pre><code class="language-javascript">var arr = ['Apple', 'pear', 'orange'];
console.log(arr.find(function (s) {
    return s.toLowerCase() === s;
})); // 'pear', 因为pear全部是小写
</code></pre>
<p>findIndex<br>
和<code>find</code>类似，区别：<code>findIndex()</code>会返回这个元素的索引，如果没有找到，返回<code>-1</code>;<br>
forEach<br>
<code>forEach()</code>和<code>map()</code>类似，但不会返回新数组;</p>
<h2 id="函数闭包">函数闭包</h2>
<p>把函数作为结果值返回，返回函数不要引用任何循环变量，或者<strong>后续会发生变化的变量</strong>：再<strong>创建一个函数</strong>，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已<strong>绑定</strong>到函数参数的值不变：</p>
<pre><code class="language-javascript">function count() {
    var arr = [];
    for (var i=1; i&lt;=3; i++) {
        arr.push((function (n) {
            return function () {
                return n * n;
            }
        })(i));
    }
    return arr;
}

var results = count();
var f1 = results[0];
var f2 = results[1];
var f3 = results[2];
f1(); // 1
f2(); // 4
f3(); // 9
</code></pre>
<ul>
<li>用了一个“创建一个匿名函数并立刻执行”的语法：</li>
</ul>
<pre><code class="language-JavaScript">(function (x) {
    return x * x;
})(3); // 9
</code></pre>
<ul>
<li>只有函数的语言里，借助闭包，可以封装一个私有变量。我们用JavaScript创建一个计数器：</li>
</ul>
<pre><code class="language-JavaScript">'use strict';
function create_counter(initial) {
    var x = initial || 0;
    return {
        inc: function () {
            x += 1;
            return x;
        }
    }
}
</code></pre>
<ul>
<li>使用：</li>
</ul>
<pre><code class="language-javascript">var c1 = create_counter();
c1.inc(); // 1
c1.inc(); // 2
c1.inc(); // 3

var c2 = create_counter(10);
c2.inc(); // 11
c2.inc(); // 12
c2.inc(); // 13
</code></pre>
<ul>
<li>闭包可以把<strong>多参数</strong>的函数变成<strong>单参数</strong>的函数:</li>
</ul>
<pre><code class="language-javascript">function make_pow(n) {
    return function (x) {
        return Math.pow(x, n);
    }
}

// 创建两个新函数:
var pow2 = make_pow(2);
var pow3 = make_pow(3);

console.log(pow2(5)); // 25
console.log(pow3(7)); // 343
</code></pre>
<h2 id="箭头函数">箭头函数</h2>
<p><code>this</code>的指向与标准<code>function</code>不同，始终指向词法作用域(还是挺糊涂的，以后遇到实例再说吧)；</p>
<pre><code class="language-javascript">var obj = {
    birth: 1990,
    getAge: function () {
        var b = this.birth; // 1990
        var fn = function () {
            return new Date().getFullYear() - this.birth; // this指向window或undefined
        };
        return fn();
    }
};
</code></pre>
<p>箭头函数修复了<code>this</code>的指向</p>
<pre><code class="language-javascript">var obj = {
    birth: 1990,
    getAge: function () {
        var b = this.birth; // 1990
        var fn = () =&gt; new Date().getFullYear() - this.birth; // this指向obj对象
        return fn();
    }
};
obj.getAge(); // 25
</code></pre>
<h2 id="generator">generator</h2>
<p><code>generator</code>由<code>function*</code>定义，可以用<code>yield</code>多次返回，也可以和函数一样用<code>return</code>返回一次。</p>
<pre><code class="language-javascript">function* fib2(max){
    var a=0, b=1, t;
    for (var i = 0; i&lt;max; i++) { 
        t=a;  //也可以直接执行 yield a;
        [a,b]=[b,a+b];
        yield t;
    }
}
//generator的调用，有两种方式
for (var shc of fib2(5)){
    console.log(shc);
}
</code></pre>
<ul>
<li>也可以用<code>next()</code>调用；</li>
</ul>
<pre><code class="language-javascript">var f = fib(5);
f.next(); // {value: 0, done: false}
f.next(); // {value: 1, done: false}
f.next(); // {value: 1, done: false}
f.next(); // {value: 2, done: false}
f.next(); // {value: 3, done: false}
f.next(); // {value: undefined, done: true}
</code></pre>
<p>学了AJAX以后可以体会到generator更大的好处，目前只知道可以保存函数的中间状态；</p>
<h2 id="regexp相关">RegExp相关</h2>
<ul>
<li>基本知识<br>
<code>\w</code>可以匹配一个字母或数字，<code>\d</code>匹配一个数字；<br>
<code>+</code>表示至少一个字符：<code>\s+</code>表示至少有一个空格；<br>
<code>*</code>表示任意个字符，<code>?</code>表示0个或1个字符；<br>
<code>\d{3,8}</code>表示3-8个数字，如<code>'1234567'</code>等；<br>
匹配<code>'010-12345'</code>，<code>-</code>是特殊字符，需要转义，所以号码的正则是<code>\d{3}\-\d{3,8}</code>；<br>
<code>[a-zA-Z\_\$][0-9a-zA-Z\_\$]*</code>表示由字母或下划线、$开头，后接任意个由一个数字、字母或者下划线、$组成的字符串；<br>
<code>A|B</code>可以匹配A或B：<code>(J|j)ava(S|s)cript</code>；<br>
<code>^</code>表示行的开头，<code>^\d</code>必须以数字开头；<br>
<code>$</code>表示行的结束，<code>\d$</code>必须以数字结束：<code>js</code>也可以匹配<code>jsp</code>，但<code>js$</code>只能匹配<code>js</code>;</li>
<li>创建正则表达式：</li>
</ul>
<pre><code class="language-javascript">var re1 = /ABC\-001/;
var re2 = new RegExp('ABC\\-001');

re1; // /ABC\-001/
re2; // /ABC\-001/
</code></pre>
<ul>
<li>切分字符串</li>
</ul>
<pre><code class="language-javascript">'a b   c'.split(' '); // ['a', 'b', '', '', 'c'];
'a b   c'.split(/\s+/); // ['a', 'b', 'c'];
'a,b, c  d'.split(/[\s\,]+/); // ['a', 'b', 'c', 'd'];
//至少一个[' '或','或';']
'a,b;; c  d'.split(/[\s\,\;]+/); // ['a', 'b', 'c', 'd'];
</code></pre>
<ul>
<li>分组<br>
除了匹配外，正则还可以提取字符串，<code>()</code>表示的就是要提取的分组；</li>
</ul>
<pre><code class="language-JavaScript">//先匹配字符串
var re = /^(\d{3})-(\d{3,8})$/;
re.exec('010-12345'); // ['010-12345', '010', '12345']
re.exec('010 12345'); // null
</code></pre>
<p><code>exec()</code>方法在匹配成功后，会返回一个<code>Array</code>，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串；失败则会返回<code>null</code>。</p>
<pre><code class="language-JavaScript">var re = /^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$/;
re.exec('19:05:30'); // ['19:05:30', '19', '05', '30']
</code></pre>
<p>上述可以识别合法日期。<br>
但是对于日期的识别可能会出问题：</p>
<pre><code class="language-JavaScript">var re = /^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$/;
</code></pre>
<p>对于<code>'2-30'</code>，<code>'4-31'</code>非法日期正则很难去识别，需要程序实现；</p>
<ul>
<li>贪婪匹配：正则<strong>默认贪婪</strong>匹配</li>
</ul>
<pre><code class="language-JavaScript">var re = /^(\d+)(0*)$/;
re.exec('102300'); // ['102300', '102300', '']
</code></pre>
<p>导致<code>0*</code>无法匹配到字符串，可以加个<code>？</code>来解决(尽可能少匹配)：</p>
<pre><code class="language-JavaScript">var re = /^(\d+?)(0*)$/;
re.exec('102300'); // ['102300', '1023', '00']
</code></pre>
<ul>
<li>全局匹配<br>
<code>g</code>，表示全局匹配；<code>i</code>，表示忽略大小写；<code>m</code>，表示多行匹配。</li>
</ul>
<pre><code class="language-JavaScript">var r1 = /test/g;
// 等价于:
var r2 = new RegExp('test', 'g');
</code></pre>
<p>全局匹配可以多次执行<code>exec()</code>方法来搜索一个匹配的字符串，指定<code>g</code>标志后，每次运行<code>exec()</code>，正则表达式本身会更新<code>lastIndex</code>属性，表示上次匹配到的最后索引：</p>
<pre><code class="language-JavaScript">var s = 'JavaScript, VBScript, JScript and ECMAScript';
var re=/[a-zA-Z]+Script/g;
// 使用全局匹配:
re.exec(s); // ['JavaScript']
re.lastIndex; // 10
re.exec(s); // ['VBScript']
re.lastIndex; // 20
re.exec(s); // ['JScript']
re.lastIndex; // 29
re.exec(s); // ['ECMAScript']
re.lastIndex; // 44
re.exec(s); // null，直到结束仍没有匹配到
</code></pre>
<p>全局匹配不能使用不能使用<code>/^...$/</code></p>
<h2 id="jason学习">Jason学习</h2>
<p>学习中看了篇评论区文章，箭头函数不乱用，箭头函数本身无this、arguments等属性，使用箭头函数一定要在外层套一层函数，使this在可见范围内，对象无法分割作用域（对象内的箭头函数无法确定this的指向），定义变量const&gt;let&gt;var尽量依次使用。</p>
<h2 id="创建对象">创建对象</h2>
<p>通过函数创建对象，理解还较浅，注意<code>prototype</code>与<code>__proto__</code>以及<code>原型链</code></p>
<pre><code class="language-javascript">function Cat(name) {
    this.name = name;
}
Cat.prototype.say = function(){
    return 'Hello, ' + this.name + '!';
}
</code></pre>
<p>可以用一个<code>createStudent</code>来内部封装<code>new</code></p>
<pre><code class="language-JavaScript">function Student(props) {
	this.name = props.name || '匿名';
	this.grade = props.grade || 1;
}

Student.prototype.hello = function () {
	alert('Hello, ' + this.name + '!');
}

function createStudent(props) {
	return new Student(props || {})
}
</code></pre>
<p><code>createStudent</code>的参数非常灵活，可以不传也可以如下：</p>
<pre><code class="language-JavaScript">var xiaoming = createStudent({
	name: '小明'
});

xiaoming.grade; 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0128小结]]></title>
        <id>https://foreup.github.io/post/0128-xiao-jie/</id>
        <link href="https://foreup.github.io/post/0128-xiao-jie/">
        </link>
        <updated>2022-01-28T08:32:42.000Z</updated>
        <content type="html"><![CDATA[<p>看完了<a href="https://www.w3school.com.cn/js/index.asp"><strong>w3school JS教程</strong></a>发现教程太长，太啰嗦了，太基础了，各种重复，因此打算去**<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023021087191360">廖雪峰</a>** 那学，过几天看看效果吧，下面看看今天在<br>
<strong>w3那总结的东西：</strong></p>
<pre><code class="language-html">&lt;script&gt;
myarray.foreach()
    function myFunction(value, index, array) { txt = txt + value + &quot;&lt;br&gt;&quot;; }  //value:项目值，index：索引，array：数组本身；
    myarray.map()    //对每个元素执行函数创建新数组，不会对没有值元素执行，不改变原来数组；   
    numbers.reduce(function1,100)   // return total + value; total 总数（初始值/先前返回的值）,可定义一个初始值, reduceRight()
    var over18 = numbers.filter(myFunction);  //function{ return value &gt;18 ; },创建通过测试的新数组；
    numbers.every()    //方法检查所有数组值是否通过测试,some()检查某些数组值.
    mynum.find()    //方法返回通过测试函数的第一个数组元素的值,findIndex()返回索引；
    -----'日期'------
    new Date(2018, 11, 24, 10, 33, 30);  //年、月、日、小时、分钟、秒,0为一月；
    var d = new Date(&quot;October 13, 2014 11:13:00&quot;); //日期存储为自 1970 年 1 月 1 日 00:00:00 UTC以来的毫秒数;
    document.getElementById(&quot;demo&quot;).innerHTML = d;  //d为日期对象，会使用 toString()自动转换为字符串；
    d.toUTCString();  d.toDateString();   //转换为易读的日期字符串
    ISO日期格式：&quot;2018-02-19&quot; （国际标准），严格符合JS标准
    new Date(&quot;2019&quot;); 与 new Date(2019); 不同；
    短日期通常使用 &quot;MM/DD/YYYY&quot; 格式；
    var d = new Date();
    d.getDate()   以数值返回天（1-31）  d.getUTCDate()  
    d.getDay()    以数值获取周名（0-6）
    d.getFullYear()   获取四位的年（yyyy）
    d.getHours()  获取小时（0-23）
    d.getMilliseconds()   获取毫秒（0-999）
    d.getMinutes()    获取分（0-59）
    d.getMonth()  获取月（0-11）
    d.getSeconds()    获取秒（0-59）
    d.getTime()   获取时间（从 1970 年 1 月 1 日至今的毫秒数）
    -----'数学'------
    Math.round(x)     返回 x 四舍五入为最接近的整数；
    Math.pow(x, y)    返回 x 的 y 次幂；
    Math.sqrt(x)    返回 x 的平方根；
    Math.ceil(x)   返回 x '上舍入' 最接近的整数
    Math.floor(x)   '下舍入'
    Math.sin(x)    返回角 x弧度 的正弦
&lt;/script&gt;
&lt;script&gt;
var add = (function () {
  var counter = 0;
  return function () {counter += 1; return counter;}
})();

function myFunction(){
  document.getElementById(&quot;demo&quot;).innerHTML = add();
}
&lt;/script&gt;
</code></pre>
<p>廖雪峰中个人认为<strong>有用的练习</strong><br>
2.不要使用JavaScript内置的parseInt()函数，利用map和reduce操作实现一个string2int()函数</p>
<pre><code class="language-html">&lt;script&gt;
var s = '123456789';
var arr = [];
for( var a of s ){ arr.push(a) }
console.log(arr);
//ASCII码，数字字符的ASCII码 - '0'的ASCII码值 = 数字字符的数值
//var brr = arr.map(function(x){ return x - '0' ;});
var brr = arr.map(function(x){ return x * 1;});
console.log(brr);
//转换为整数
var c = brr.reduce(function(x,y){ return x * 10 + y; });
console.log(c);
&lt;/script&gt;
</code></pre>
<p>3.把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字</p>
<pre><code class="language-html">&lt;script&gt;
var arr = ['adam', 'LISA', 'barT'];
var l3arr = arr.map(function(x){return x[0].toUpperCase()+x.slice(1).toLowerCase();});
console.log(l3arr);
&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0127学习笔记]]></title>
        <id>https://foreup.github.io/post/0127-xue-xi-bi-ji/</id>
        <link href="https://foreup.github.io/post/0127-xue-xi-bi-ji/">
        </link>
        <updated>2022-01-27T11:58:29.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;学过的语法记录&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type=&quot;&quot;&gt;
    /*onchange	HTML 元素已被改变
    onclick	用户点击了 HTML 元素
    onmouseover	用户把鼠标移动到 HTML 元素上
    onmouseout	用户把鼠标移开 HTML 元素
    onkeydown	用户按下键盘按键
    onload	浏览器已经完成页面加载*/

    concat()
    indexOf()
    lastIndexOf()
    /*搜索字符串*/
    search()
    slice()
    substring()
    substr()
    --------------
    replace()
    toUpperCase()
    toLowerCase()
    mystring.trim()
    --------------
    提取字符串
    charAt() //返回字母
    charCodeAt() // 返回编码值
    str[0];   // str = &quot;HELLO WORLD&quot;，返回 H；

    text.match(/ain/g)    // 返回数组 [ain,ain,ain]
    text.match(/ain/gi)    // 返回数组 [ain,AIN,ain,ain]
    string.includes(searchvalue, start) //start 起始位置可选
    text.includes(&quot;world&quot;)    // 返回 true
    string.startsWith(searchvalue, start)
    text.startsWith(&quot;Hello&quot;)   // 字符串以Hello开头，返回 true
    text.endsWith(&quot;Doe&quot;, 5)    // 返回 true
    let text = &quot;Bill Gates&quot;;
    text.endsWith(&quot;Gates&quot;,10); //指定长度后必须严格和长度一致，9或11均为 false
    /*模板字面量*/
    let text = `He's often called &quot;Johnny&quot;`;  //反引号允许多行字符串
    let text =
    `The quick the    
    lazy dog`;
    let firstName = &quot;John&quot;;
    text = `Welcome ${firstName}!`;  //字符串插值（string interpolation）,变量和表达式插入字符串
    total = `Total: ${(price * (1 + VAT)).toFixed(3)}`; //price=10，VAT=0.25,；
    let html = `&lt;h2&gt;${header}&lt;/h2&gt;&lt;ul&gt;`; //HTML模板，具体例子太长；
    isNaN(x);               // 返回 true，因为 x 不是数；
    typeof Infinity;     //返回number，是超出计算的数字；
    0x;         //解释为16进制；
    number.toString(16);     // 返回 80，toString()以字符串形式输出为指定进制，默认10；
    x.toExponential(2);   //（）内为小数点后位数；
    mynum.toFixed(num); //num确定保留以四舍五入保留几位小数；
    toPrecision()      返回字符串值，指定长度的'数字'
    new Number(500);    //不要用new定义对象，JS中对象无法进行比较；
    valueOf()     //以数值返回数值
    Number()
    parseInt()
    parseFloat()
    MAX_VALUE ; MIN_VALUE; 对变量、表达式或值使用数字属性，将返回 undefined;
    ----/数组方法/----
    Array.foreach()  //遍历数组
    fruits.push(&quot;Lemon&quot;);    // 向 fruits 添加一个新元素 (Lemon)，返回字符串长度，使用高索引添加会增加“洞/undefined”
    pop()    //从数组中弹出元素，返回弹出的值；
    shift()   //从首部移出元素
    unshift()   //从首部增加元素
    delete fruits[0];   // 把 fruits 中的首个元素改为 undefined,尽量不用
    myarray.toString()     //把数组转换为数组值（逗号分隔）的字符串
    myarray.join()      //可以规定结合成为字符串的分割符
    fruits.splice(2, 0, &quot;Lemon&quot;, &quot;Kiwi&quot;);   //第二个参数（0）定义应删除多少元素,返回一个包含已删除项的数组
    fruits.splice(0, 1);     // 删除 fruits 中的第一个元素
    fruits.slice()    //用fruits的某个片段切出新数组,不删除改变fruits，start位置(,end位置)；
    fruits.sort()    //方法是最强大的数组方法之一,按字母排序；
    points.sort(function(a, b){return a - b});  //数字小-&gt;大排序；
    points.sort(function(a, b){return 0.5 - Math.random()});   //随机排序数组；
    Math.max(1, 2, 3); Math.min(1, 2, 3);
    cars.sort(function(a, b){return a.year - b.year});  //排序有属性数组；
    

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github Pages与GRidea搭建静态博客]]></title>
        <id>https://foreup.github.io/post/github-pages-yu-gridea-da-jian-jing-tai-bo-ke/</id>
        <link href="https://foreup.github.io/post/github-pages-yu-gridea-da-jian-jing-tai-bo-ke/">
        </link>
        <updated>2022-01-25T10:15:20.000Z</updated>
        <summary type="html"><![CDATA[<p>说不清的辛酸与累啊，以后看情况更新今天所经历的挫折吧！<br>
FLAG：每日一篇总结性文章（包括前端学习、C++学习等）</p>
]]></summary>
        <content type="html"><![CDATA[<p>说不清的辛酸与累啊，以后看情况更新今天所经历的挫折吧！<br>
FLAG：每日一篇总结性文章（包括前端学习、C++学习等）</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://foreup.github.io/post/hello-gridea/</id>
        <link href="https://foreup.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>